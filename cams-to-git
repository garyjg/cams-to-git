#! /bin/sh -x

# ----------------------------------------------------------------
# First we need to split up the top levels of the subversion repository:

# [granger@roo ~]$ svn ls https://proxy.subversion.ucar.edu/eol-cams/
# BrianProto/
# MiniD/
# MiniD-PostProcessing/
# branches/
# data/
# labview-scratch/
# pickle/
# rio-dev/
# shared/
# tags/
# trunk/

# The data directory will not be converted, so it must be excluded.

# The pickle directory is just for experiments and examples and will not be
# converted.

# Within labview-scratch, all but Embedded can become its own repository
# for "scratch" labview code.  labview-scratch/Embedded is an important
# development branch which is included in the trunk line as an external, so
# it can become its own repository.

# I don't think there is anything useful in tags, so ignore it.

# ----------------------------------------------------------------
# These are the branches:
#
# [granger@roo eol-cams]$ svn ls https://proxy.subversion.ucar.edu/eol-cams/branches
# DC3/
# Embedded LV2013SP1/
# Embedded LV2015/
# Embedded TBD LV2015/

# Future-single-queue/

#  -- Branch of shared/Future which can probably be ignored.  However, the
#     Future library started out in /labview-scratch/task-prototypes/Future
#     and then moved into the shared/ directory, so I think that means that
#     path must be included and perhaps renamed to extract the shared
#     repository...

# Scheduler and State/
# State with Steps/
# datastream-sync-rewrite/
# datastream-sync-rewrite-20120615/
# datastream-sync-rewrite-trunk-merge-20120531/
# datastream-timing-channel-backups/
# new-conc/


# ----------------------------------------------------------------
# Authors
#
# svn2git requires these entries in ~/.svn2git/authors
#
# granger = Gary Granger <granger@ucar.edu>
# weibring = Petter Weibring <petter.weibring@colorado.edu>
# brian.kindinger = Brian Kindinger <brian.kindinger@ni.com>

# ----------------------------------------------------------------
# Large files
#
# There is one file larger than 100MB which is not needed and can just be
# excluded.  I think it's enough to exclude it from the trunk where it
# first appeared, to keep it from showing up in branches and tags.

bigfile="trunk/Data Processing/FFT/WMS FFT harmonics retrieval - Example 1b for Zhensong.vi"

set -o pipefail

sedfile="cams-to-git-sedfile"
rm -f "$sedfile"

authorsfile="cams-to-git-authors"
rm -f $authorsfile

createauthors() {
    cat > "$authorsfile" <<EOF
granger = Gary Granger <granger@ucar.edu>
weibring = Petter Weibring <petter.weibring@colorado.edu>
brian.kindinger = Brian Kindinger <brian.kindinger@ni.com>
EOF
}

createsedfile() {
    cat /dev/null > "$sedfile"
    while read source dest ; do
	cat >> "$sedfile" <<EOF
s,^Node-path: $source,Node-path: $dest,
s,^Node-copyfrom-path: $source,Node-copyfrom-path: $dest,
EOF
    done <<EOF
labview-scratch/task-prototypes/Future shared/Future
labview-scratch/GutCheck shared/GutCheck
labview-scratch/ReferenceObject shared/ReferenceObject
labview-scratch/Counter/Logging shared/Logging
labview-scratch/task-prototypes/eol-extra-g shared/eol-extra-g
labview-scratch/task-prototypes/Dispatcher shared/Dispatcher
EOF
}


renames() {
    test -r "$sedfile" || createsedfile
    sed --file="$sedfile"
}

rename() { # source dest
    local source="$1"
    local dest="$2"
    sed -e "s,^Node-path: $source,Node-path: $dest," \
	-e "s,^Node-copyfrom-path: $source,Node-copyfrom-path: $dest,"
}


# Keep empty revs because I think otherwise svnadmin load fails when
# mergeinfo properties refer to missing revisions.
filteropts="--drop-all-empty-revs --quiet"
filteropts="--quiet"
svndumpfilter="svndumpfilter $filteropts"

createsvnrepo() { # repopath [basedirs ...]
    local repopath="$1"
    local basedirs="$2 $3 $4 $5 $6"
    rm -rf "$repopath"
    mkdir -p "$repopath"
    local url=file://`cd "$repopath" && pwd`
    svnadmin create --fs-type fsfs "$repopath"
    # basedirs="trunk branches tags"
    for d in $basedirs END ; do
	test $d == END && break
	svn mkdir -m "create $d directory" $url/$d
    done
}


loadsvnrepo() { # repopath
    local repopath="$1"
    # Assume the dump file does not have a trunk path
    # parentopt="--parent-dir trunk"
    # svn mkdir -m "create $repopath directory" $url/$repopath
    svnadmin load $parentopt "$repopath" || exit 1
    # Without a root trunk/ path, svn2git will use --rootistrunk
}


buildsvnrepo() { # repopath [basedirs ...]
    createsvnrepo "$@"
    loadsvnrepo "$1"
}

svntogit() { # svn-url
    url="$1"
    test -r "$authorsfile" || createauthors
    reponame=`basename "$url"`.git
    if [ "$reponame" == .git ]; then
	echo "Repo name did not get set."
	exit 1
    fi
    rm -rf "$reponame"
    mkdir "$reponame"
    local authors="--authors `pwd`/$authorsfile"
    (cd "$reponame" && /usr/local/bin/svn2git --no-minimize-url --metadata $authors "$url" </dev/null)
    # Sometimes svn2git tries to run git gc and it fails, so just run it
    # separately every time.
    (cd "$reponame" && git gc)
}


pathtogit() { # repopath [-r<revs>] dumpfile 
    local repopath="$1"
    shift
    local revs=""
    local dumpfile=""
    for arg in $* ; do
	case "$arg" in
	    -r*) revs="$arg" ;;
	    *) dumpfile="$arg" ;;
	esac
    done
    if [ -z "$dumpfile" -o -z "$repopath" ]; then
	echo "pathtogit <repopath> [-r<revs>] <dumpfile>"
	exit 1
    fi
    createsvnrepo $repopath
    test $? -eq 0 || exit 1
    cat "$dumpfile" | \
	$svndumpfilter include "$repopath" | \
	rename "$repopath" trunk | \
	svnadmin load $revs $repopath
    test $? -eq 0 || exit 1

    local url=file://`cd "$repopath" && pwd`
    svntogit "$url"
}


# Combine MiniD with MiniD-PostProcessing by renaming MiniD-PostProcessing
# to MiniD/PostProcessing.

minid() {
    local dumpfile="$1"
    local repopath=MiniD
    createsvnrepo $repopath
    test $? -eq 0 || exit 1
    cat "$dumpfile" | \
	$svndumpfilter include "MiniD" "MiniD-PostProcessing" | \
	rename "MiniD-PostProcessing" trunk/PostProcessing | \
	rename "MiniD" trunk | \
	svnadmin load -r237:241 $repopath
    test $? -eq 0 || exit 1

    local url=file://`cd "$repopath" && pwd`
    svntogit "$url"
}


# shared works.  Only difference is that LogDisplay directory does not
# appear in git repo because it is empty in subversion.

shared() {
    # Since several libraries started out in labview-scratch, we must
    # include them explicitly.

    # /shared was created in r300, so skip that, and likewise the revisions
    # which copied from labview-scratch: r301, r302, r303, r304, r305.

    # branches/Future-single-queue is a branch of shared/Future, but it is
    # not a true git branch because it does not branch the whole shared
    # repo, so just leave it out since it's not needed anyway.

    # Counter was never moved into /shared, so exclude it after renaming
    # Counter/Logger to trunk/Logger

    # labview-scratch/SelfReference was added in r493, renamed to
    # ReferenceObject in r617, then ReferenceObject was moved into /shared
    # in r619.

    local dumpfile="$1"
    createsvnrepo shared trunk
    rm -f shared.dump
    cat "$dumpfile" | \
	$svndumpfilter include \
		      labview-scratch/SelfReference \
		      labview-scratch/task-prototypes/Future \
		      labview-scratch/GutCheck \
		      labview-scratch/ReferenceObject \
		      labview-scratch/Counter \
		      labview-scratch/task-prototypes/eol-extra-g \
		      labview-scratch/task-prototypes/Dispatcher \
		      shared | \
	rename labview-scratch/task-prototypes trunk | \
	rename labview-scratch/GutCheck trunk/GutCheck | \
	rename labview-scratch/SelfReference trunk/ReferenceObject | \
	rename labview-scratch/ReferenceObject trunk/ReferenceObject | \
	rename labview-scratch/Counter/Logging trunk/Logging | \
	$svndumpfilter exclude labview-scratch/Counter | \
	rename shared trunk \
	> shared.dump
    for revs in 0:299 306:616 618 620:9999 ; do
	svnadmin load -r$revs shared < shared.dump || exit 1
    done
    sharedgit
}


sharedgit() {
    repopath=shared
    local url=file://`cd "$repopath" && pwd`
    svntogit "$url"
}


# /rio-dev was first added in r1789, r1790 imported code into
# /rio-dev/rio-dev, then r1791 deleted /rio-dev.  So no history for
# /rio-dev is needed before r1792, and in fact that's also the last commit
# to /rio-dev.

riodev() {
    pathtogit rio-dev -r1792 "$@" 
}


# In r509, trunk/Embedded was renamed from trunk/Utility.  Then in r660 it
# was renamed to "trunk/Target Communication", and in r661 the svn:external
# property was added to /trunk to embed the Embedded directory from
# labview-scratch.  So the CAMS conversion should already contain all the
# initial modifications to the trunk/Embedded tree and it's eventual rename
# to become "Target Communication".  For the Embedded repo to which the
# svn:external referred, all we need to convert is the
# labview-scratch/Embedded development line beginning with r433.

embedded() {
    local dumpfile="$1"
    local repopath=Embedded
    createsvnrepo $repopath
    test $? -eq 0 || exit 1
    cat "$dumpfile" | \
	$svndumpfilter include "labview-scratch/Embedded" | \
	rename "labview-scratch/Embedded" trunk > embedded.dump
    test $? -eq 0 || exit 1

    # Start with Embedded added in r433.
    svnadmin load -r433:9999 $repopath < embedded.dump
    test $? -eq 0 || exit 1
    local url=file://`cd "$repopath" && pwd`
    svntogit "$url"
}


# Need to create intermediate directories when the whole directory is
# not being included, otherwise the transaction load fails.  So create
# /branches, but rename /labview-scratch/task-prototypes/DataStore to
# keep it under the trunk.

# Rename /BrianProto to /trunk/ConfigUI in the filter, since it was
# just copied into trunk in r313 and not changed after that.  Since
# there is no way to skip r313 by itself, use two separate loads to
# load the revisions before and after that.

# Likewise for labview-scratch/task-prototypes/DataStore.  It was
# copied to trunk/DataStream/DataStore in r424, and
# labview-scratch/task-prototypes copy was not (really) changed after
# that.  However, trunk/DataStream does not exist until 422, so we
# can't rename it directly.  Instead, put it under the trunk to start,
# and then replace r424 with a move from trunk/DataStore to
# trunk/DataStream.

# After the conversion, DataStream/DataStreamException and
# DataStream/AnalogChannel are still in the svn checkout but not in the
# git checkout, because they are both empty directories.  Otherwise the
# only differences should be the missing externals: shared and
# Embedded.

# Do not include the new-analysis branch, since the commit comment in
# r1774 specifically says it was corrupted, so it's not worth keeping.

# I tried skipping the revisions which created and deleted the first
# new-conc branch, instead keeping only the branch started in r1776 as a
# copy of /trunk:1763, but that caused differences between the git checkout
# of the new-conc branch and the subversion checkout.  I could not figure
# out why, so the original revisions are still included.

# When pushing the final git repo, make sure to push --all after setting
# upstream, otherwise only the master branch is pushed to github.

camsdump() {
    # CAMS is the trunk plus several of the branches subdirectories
    local dumpfile="$1"
    echo "Creating CAMS repository..."

    rm -f cams.dump
    cat "$dumpfile" | \
	$svndumpfilter exclude "$bigfile" | \
	$svndumpfilter include trunk branches/DC3 \
        labview-scratch/task-prototypes/DataStore \
        BrianProto \
	"branches/State with Steps" \
	branches/datastream-sync-rewrite \
	branches/datastream-sync-rewrite-20120615 \
	branches/datastream-sync-rewrite-trunk-merge-20120531 \
	branches/datastream-timing-channel-backups \
	branches/new-conc | \
	$svndumpfilter exclude "trunk/Evaluation" | \
	rename labview-scratch/task-prototypes/DataStore trunk/DataStore | \
	rename BrianProto trunk/ConfigUI > cams.dump
}


camsload() {
    createsvnrepo cams branches
    repopath=cams
    local url=file://`cd "$repopath" && pwd`

    svnadmin load -r0:312 cams < cams.dump
    svnadmin load -r314:423 cams < cams.dump

    svn mv -F - "$url/trunk/DataStore" "$url/trunk/DataStream" <<EOF
move DataStore into place under DataStream, replacing the original commit
which only copied it from labview-scratch/task-prototypes
EOF

    # After moving DataStore, the rest of the references have to refer to
    # the new path.

    # This was to skip r1772 and r1775, where the first new-conc branch
    # was created and then deleted, but it causes differences for some reason:
    #
    # revlist="425:1771 1773:1774 1776:9999"

    revlist="425:9999"
    for revs in $revlist ; do
	cat cams.dump | \
	    rename trunk/DataStore trunk/DataStream/DataStore | \
	    svnadmin load -r$revs cams
    done
}

camsgit() {
    repopath=cams
    local url=file://`cd "$repopath" && pwd`
    svntogit "$url"
}

cams() { # dumpfile
    camsdump "$1" && camsload && camsgit
}


# From Petter:
#
# I realized that I never explained the parts of the "Embedded TBD LV2015"
# in my last e-mail...Sorry... Everything in the Embedded directory except
# the "TBD" sub-directory belongs to the CVT based code and it can be in a
# new repository "CVT". The "TBD" sub directory contains everything that
# belongs to the object oriented development and it can be in a new
# repository called "DCAF".

# So /branches/Embedded TBD LV2015/TBD was added in r1955, and even though
# some commits after that change files outside of TBD, I assume I can use a
# filter to include only TBD into a DCAF repository...

# Also, in r1954, /branches/Embedded TBD LV2015 was copied from
# /branches/Embedded LV2015, which in r1924 was copied from
# /branches/Embedded LV2013SP1, which in turn in r1796 was copied from
# /labview-scratch/Embedded.  So we handle this like CAMS: rename all the
# various copies to be the trunk, and then skip the revisions which were
# actually copies.  Fortunately none of the copies changed any files or
# this wouldn't work.

# Finally, the original labview-scratch/Embedded was deleted in r432 and
# replaced in r433, so we only need revisions after r433.

#
# remote: warning: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
# remote: warning: See http://git.io/iEPt8g for more information.
# remote: warning: File Evaluation/TDMS/Data Files/100127 4 lines_01.tdms is 54.19 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB
# To git@github.com:/NCAR/LVS-CAMS.git
#  * [new branch]      master -> master
#

# The systemimage.tar.gz file is too large for github, and it seems
# inappropriate to be keeping drive images in revision control, so leave
# out the entire subdirectory.
#
# ------------------------------------------------------------------------
# r2029 | weibring | 2016-08-14 22:57:29 -0600 (Sun, 14 Aug 2016) | 1 line
# Changed paths:
#    A /branches/Embedded TBD LV2015/TBD/Target/Drive Images
#    A /branches/Embedded TBD LV2015/TBD/Target/Drive Images/Flow
#    A /branches/Embedded TBD LV2015/TBD/Target/Drive Images/Flow/Flow Image 20160814
#    A /branches/Embedded TBD LV2015/TBD/Target/Drive Images/Flow/Flow Image 20160814/RTCtrlr.ini
#    A /branches/Embedded TBD LV2015/TBD/Target/Drive Images/Flow/Flow Image 20160814/nisyscfg.niauth.bin
#    A /branches/Embedded TBD LV2015/TBD/Target/Drive Images/Flow/Flow Image 20160814/systemimage.tar.gz


dcaf() {
    local dumpfile="$1"
    local repopath=DCAF
    createsvnrepo $repopath
    test $? -eq 0 || exit 1
    cat "$dumpfile" | \
	$svndumpfilter include "branches/Embedded TBD LV2015/TBD" | \
	$svndumpfilter exclude \
	       "branches/Embedded TBD LV2015/TBD/Target/Drive Images" | \
	rename "branches/Embedded TBD LV2015/TBD" trunk | \
	svnadmin load $repopath
    test $? -eq 0 || exit 1
    local url=file://`cd "$repopath" && pwd`
    svntogit "$url"
}

# After converting CVT, there are only these differences.  The missing TBD
# is expected, and the xml and ctl files may differ because of line
# endings.

# diff -q --recursive -x .git -x .svn ../CVT/ CVT.git/
# Files ../CVT/Configuration Files/Target_Tag_Configuration.xml and CVT.git/Configuration Files/Target_Tag_Configuration.xml differ
# Files ../CVT/Target/Code/FPGA/Ctrls/spectra_fpga_vi_reference.ctl and CVT.git/Target/Code/FPGA/Ctrls/spectra_fpga_vi_reference.ctl differ
# Only in ../CVT/: TBD
#
cvt() {
    local dumpfile="$1"
    local repopath=CVT
    createsvnrepo $repopath || exit 1
    cat "$dumpfile" | \
	$svndumpfilter include \
		       "labview-scratch/Embedded" \
		       "branches/Embedded TBD LV2015" \
		       "branches/Embedded LV2015" \
		       "branches/Embedded LV2013SP1" | \
	$svndumpfilter exclude "branches/Embedded TBD LV2015/TBD" | \
	rename "labview-scratch/Embedded" trunk | \
	rename "branches/Embedded TBD LV2015" trunk | \
	rename "branches/Embedded LV2015" trunk | \
	rename "branches/Embedded LV2013SP1" trunk > cvt.dump
    test $? -eq 0 || exit 1

    # Start with Embedded added in r433, and skip copies in r1796, r1924,
    # and r1954.
    for revs in 433:1795 1797:1923 1925:1953 1955:9999 ; do
	svnadmin load -r$revs $repopath < cvt.dump || exit 1
    done

    local url=file://`cd "$repopath" && pwd`
    svntogit "$url"
}


# This should include /labview-scratch/TDMS-Test which was moved from
# trunk/Evaluation in r250, since the trunk/Evaluation revisions are
# omitted from CAMS.  We also may need to trim the larger tdms files (>
# 50MB) to avoid warnings from github.

# The Subpanels-and-Panes scratch directory was created in r352, and then
# two VIs were moved there from trunk/ConfigUI in r353:
#
# trunk/ConfigUI/ExampleQuadTabPanels.vi
# trunk/ConfigUI/ExampleTreeQuadPanels.vi
#
# Those files were added to trunk/ConfigUI in r351.  So to keep those
# without having to include all of trunk/ConfigUI, we do the following:
#
# Create trunk/Subpanels-and-Panes explicitly after r350.  It doesn't
# matter when, it just has to happen after r149 when labview-scratch (aka
# trunk) is created.  Or else we skip r149 and create both upfront.
#
# Include only those VIs from ConfigUI but rename them so they are added
# to trunk/Subpanels... in r351.
#
# Skip r352 which created Subpanels...

# labview-scratch/tutorials came from trunk/labview/tutorials in r384,
# which in turn was moved from trunk/tutorials in r7, and trunk/tutorials
# was created in r6.  So skip the move in r7 and map
# trunk/labview/tutorials to just trunk/tutorials.

# So trunk/labview and trunk/tutorials should have been omitted from CAMS
# trunk, but they were not.  Oh well.

# labview-scratch/Counter did not move into shared, so only
# labview-scratch/Counter/Logger needs to be excluded.

scratch() {
    # All the libraries which got incorporated into the shared repository
    # can just be excluded from scratch.  This is not that big a deal since
    # they are not large, but it could avoid confusion.
    local dumpfile="$1"
    local repopath=scratch
    echo "Creating labview scratch repository..."
    rm -f scratch.dump
    createsvnrepo $repopath trunk trunk/Subpanels-and-Panes || exit 1
    cat "$dumpfile" | $svndumpfilter include \
	     labview-scratch trunk/Evaluation \
	     trunk/tutorials trunk/labview/tutorials \
	     trunk/ConfigUI/ExampleQuadTabPanels.vi \
	     trunk/ConfigUI/ExampleTreeQuadPanels.vi | \
	rename trunk/labview/tutorials trunk/tutorials | \
	rename trunk/ConfigUI trunk/Subpanels-and-Panes | \
	$svndumpfilter exclude \
		      labview-scratch/Embedded \
		      labview-scratch/task-prototypes/Future \
		      labview-scratch/GutCheck \
		      labview-scratch/ReferenceObject \
		      labview-scratch/Counter/Logger \
		      labview-scratch/task-prototypes/eol-extra-g \
		      labview-scratch/task-prototypes/Dispatcher | \
	rename labview-scratch trunk | \
	rename trunk/Evaluation trunk/TDMS-Test | \
	$svndumpfilter exclude \
	       "trunk/TDMS-Test/TDMS/Data Files/100127 4 lines_01.tdms" \
	       "trunk/TDMS-Test/TDMS/Data Files/100127 4 lines_01.tdms_index" \
	       > scratch.dump
    test $? -eq 0 || exit 1

    # Skip TDMS-Test move in r250, labview-scratch creation in r149,
    # Subpanels creation in r352, and Example vi moves in r353.  Also skip
    # r384 which moved /trunk/labview/tutorials into labview-scratch,
    # otherwise the trunk/tutorials being assembled above just gets
    # deleted.
    for revs in 0:6 8:148 150:249 251:351 354:383 385:9999 ; do
	svnadmin load -r$revs $repopath < scratch.dump || exit 1
    done

    local url=file://`cd "$repopath" && pwd`
    svntogit "$url"
}


# /branches/new-conc is a branch of trunk, but Petter wanted to keep it as
# a separate repository to pick up for future development.  The initial
# copy was in r1772, and the copy included some modifications also.  But
# then that copy was deleted in r1775 and repeated in r1776, again with a
# few modifications from the trunk, and new directories "Data
# Processing/Analysis" and "Task/TaskConcEval". r1783 was the last commit
# to that branch.  There really aren't that many changes on it, so it seems
# like it should stay a branch of CAMS rather than become an almost
# complete copy of CAMS.

newconc() {
    local dumpfile="$1"
    local repopath=new-conc

    rm -f "${repopath}.dump"
    createsvnrepo $repopath || exit 1
    cat "$dumpfile" | $svndumpfilter include "branches/new-conc" | \
	rename "branches/new-conc" trunk | \
	$svndumpfilter exclude \
	       "trunk/TDMS-Test/TDMS/Data Files/100127 4 lines_01.tdms" \
	       "trunk/TDMS-Test/TDMS/Data Files/100127 4 lines_01.tdms_index" \
	       > "${repopath}.dump"
    test $? -eq 0 || exit 1

    for revs in 0:1783 ; do
	svnadmin load -r$revs $repopath < "${repopath}.dump" || exit 1
    done

    local url=file://`cd "$repopath" && pwd`
    svntogit "$url"
}



if [ $# -lt 1 ]; then
    echo "Usage: $0 <op> [args ...]"
    exit 1
fi

op="$1"
shift

case "$op" in

    svntogit)
	if [ $# -ne 1 ]; then
	    echo "Usage: $0 $op <svn-url>"
	    exit 1
	fi
	svntogit "$@"
	;;

    scratch|embedded|riodev|shared*|minid|dcaf|cvt|cams*)
	if [ $# -ne 1 ]; then
	    echo "Usage: $0 $op <dumpfile>"
	    exit 1
	fi
	$op "$@"
	;;

    diff)
	# Compare subversion checkout with git checkout:
	if [ $# -ne 2 ]; then
	    echo "Usage: $0 $op <svn-checkout> <git-checkout>"
	    exit 1
	fi
	exec diff -q --recursive -x .git -x .svn "$1" "$2"
	;;

    *)
	echo "Unrecognized op: $op"
	exit 1
	;;

esac

